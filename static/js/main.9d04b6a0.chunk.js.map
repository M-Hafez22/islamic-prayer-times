{"version":3,"sources":["components/hooks/useCurrentDate.js","components/contexts/languageContext.js","components/helper/formatTime.js","components/Clock.js","components/hooks/useFetch.js","components/contexts/FetchedDataContext.js","components/hooks/useLocation.js","components/HijriDate.js","components/PrayCard.js","components/RemainTime.js","components/hooks/useNextPray.js","components/PrayTimes.js","components/LanguageToggle.js","components/TimeZone.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useCurrentDate","url","useState","Date","date","setDate","useEffect","setInterval","LanguageContext","createContext","LanguageProvider","props","language","setLanguage","Provider","value","children","addZero","number","to12Format","time","hour","slice","indexOf","minute","length","getTimeFormat","num","Math","ceil","abs","h","floor","m","s","Clock","useContext","currentTime","getHours","getMinutes","dayOrNight","en","ar","className","style","flexDirection","getSeconds","FetchedDataContext","FetchedDataProvider","latitude","setLatitude","longitude","setLongitude","navigator","geolocation","getCurrentPosition","position","coords","console","log","message","useLoaction","now","fetcheddata","setFetchedData","Loaded","setLoaded","fetch","then","response","json","data","useFetch","loaded","HijriDate","gregorian","hijri","weekday","day","month","year","PrayCard","name","active","RemainTime","text","prayer","useNextPrayer","arr","prayDate","map","p","getFullYear","getMonth","getDate","substring","timeLeft","remainingPrayers","filter","el","remaineTime","max","nextPrayer","PrayTimes","timings","forEach","i","prayer_en","Object","keys","prayerNames","prayTimes","values","nextPray","prayerTimeList","key","LanguageToggle","toggle","e","currentTarget","textContent","onClick","TimeZone","meta","timezone","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9d04b6a0.chunk.js","sourcesContent":["import {useEffect, useState} from 'react'\n\n\nexport const useCurrentDate = (url) => {\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        setInterval(() => setDate(new Date()), 1000);\n    },[])  \n\n    return  date;\n}\n\n","import React, {useState, createContext}from \"react\";\n\n\nexport const LanguageContext = createContext();\n\nexport function LanguageProvider(props) {\n    const [language, setLanguage] = useState(\"en\");\n\n    return(\n      <LanguageContext.Provider value={[language, setLanguage]}>\n          {props.children}\n      </LanguageContext.Provider>\n    )\n}\n","\nexport const addZero = (number) => (number < 10 ? `0${number}` : number);\n\nexport const to12Format = (time) => {\n  \n  let hour = time.slice(0,time.indexOf(\":\"));\n  let minute = time.slice(time.indexOf(\":\")+1);\n\n  //convert to 12 Formate\n  hour = (hour % 12) || 12;\n\n  // formate Look\n  hour = addZero(hour);\n  minute.length < 2\n    ? minute = addZero(minute)\n    : minute = minute;\n\n  return `${hour}:${minute}`;\n}\n\n\n// Format time ( for nextPray )\nexport const getTimeFormat = (num) =>{\n  num = Math.ceil(Math.abs(num) / 1000);\n  const h = Math.floor(num / 3600);\n  num  %= 3600;\n  const m = Math.floor(num / 60);\n  const s =  num % 60;\n  return (`${addZero(h)}:${addZero(m)}:${addZero(s)}`)\n}\n","import React, {useContext} from 'react'\nimport { useCurrentDate } from './hooks/useCurrentDate'\nimport {LanguageContext} from './contexts/languageContext'\nimport {to12Format, addZero} from './helper/formatTime'\n\nexport default function Clock() {\n\n    const [language] = useContext(LanguageContext);\n\n    // Get the current time\n    const date = useCurrentDate();\n    const currentTime = `${date.getHours()}:${date.getMinutes()}`;\n\n    // Determine night or day\n    const dayOrNight = {\n        en : date.getHours() < 12 ? \"AM\" : \"PM\",\n        ar: date.getHours() < 12 ? \"صباحاً\" : \"مساءً\"\n    };\n\n    return (\n        <div\n          className='clock'\n          style={{flexDirection: language === \"ar\" && \" row-reverse\"}}>\n\n          <h2>\n            {to12Format(currentTime)}\n            <span>\n              :{addZero(date.getSeconds())}\n            </span>\n          </h2>\n          \n          <span>{dayOrNight[language]}</span>\n\n        </div>\n    )\n}\n","import {useEffect, useState} from 'react'\n\n\nexport const useFetch = (url) => {\n    const [fetcheddata, setFetchedData] = useState(null);\n    // true if the data is fetched \n    const [Loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        console.log('Fetching....')\n       fetch(url)\n        .then(response => response.json())\n        .then(data => {\n            setFetchedData(data.data)\n            setLoaded(true)\n        })\n    }, [url]);\n\n    return  [Loaded, fetcheddata];\n}\n","import React, { createContext } from \"react\";\nimport { useFetch } from '../hooks/useFetch'\nimport { useLoaction } from '../hooks/useLocation';\n\nexport const FetchedDataContext = createContext();\n\nexport function FetchedDataProvider(props) {\n\n    // Get Local coords\n    const [latitude, longitude] = useLoaction();\n    // Get time\n    const date = Math.floor(Date.now() / 1000);\n    // Get Data\n    const [loaded, data] = useFetch(`https://api.aladhan.com/v1/timings/${date}?latitude=${latitude}&longitude=${longitude}&method=5`);\n\n    return (\n        <FetchedDataContext.Provider value={[loaded, data]}>\n            {props.children}\n        </FetchedDataContext.Provider>\n    )\n}\n","import {useState} from 'react'\n\nexport const  useLoaction = () =>  {\n\n    const [latitude, setLatitude] = useState(\"30.008\");\n    const [longitude, setLongitude] = useState(\"31.2194\");\n\n    // get current location \n    const  success = (position) => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n    }\n    \n    const  error = (position) => {console.log(position.message);}\n    \n    !navigator.geolocation ?\n        console.log('Geolocation is not supported by your browser') :\n        navigator.geolocation.getCurrentPosition(success, error);\n\n    return [latitude, longitude]\n\n}\n","import React, {useContext} from 'react'\nimport {FetchedDataContext} from './contexts/FetchedDataContext'\nimport {LanguageContext} from './contexts/languageContext'\n\n\nexport default function HijriDate() {\n\n    const [loaded, data] = useContext(FetchedDataContext);\n    const [language] = useContext(LanguageContext);\n    // Get Hijri Date\n    const gregorian = loaded && data.date.gregorian;\n    const hijri = loaded && data.date.hijri;\n\n    return loaded &&(\n        <div className=\"date\">\n            {\n              language === \"en\"\n                ? <h2>{gregorian.weekday.en} {hijri.day} {hijri.month.en} {hijri.year}</h2>\n                : <h2>{hijri.weekday.ar} {hijri.day} {hijri.month.ar} {hijri.year}</h2>\n            }\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function PrayCard({name, time, active}) {\n\n    return (\n        <li className={active}>\n            <h3>{name}</h3>\n            <h3>{time}</h3>\n        </li>\n    )\n}\n","import React from 'react'\n\nexport default function RemainTime({text ,prayer, time}) {\n\n    return (\n        <div>\n            <h2>{text} {prayer}</h2>\n            <span className=\"remainTime\">{time}</span>\n        </div>\n    )\n}\n","\nimport { useCurrentDate } from './useCurrentDate'\nimport {getTimeFormat} from '../helper/formatTime'\n\nexport default function useNextPrayer(arr) {\n    // Get current time\n    const date = useCurrentDate();\n    // Get the date of the prayer\n    const getTime = time => new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.substring(0, 2), time.substring(3, 5), 0, 0);\n    const prayDate = arr.map(p => getTime(p))\n\n    // Get the remaining time for each prayer\n    const timeLeft = prayDate.map(p => p =(date - p))\n\n    // Get the remaining prayers for today\n    const remainingPrayers = timeLeft.filter(el => el < 0)\n\n    // Get the remaining time for the next prayer\n    const millisecondsInDay = 86400000;\n    let remaineTime = remainingPrayers.length > 0\n      ? ( Math.max(...remainingPrayers))\n      : (millisecondsInDay - (date - prayDate[0]))\n\n    // Get next Prayer index\n    const nextPrayer = timeLeft.indexOf(remaineTime) !== -1\n      ? timeLeft.indexOf(remaineTime)\n      : 0\n\n    return [getTimeFormat(remaineTime), nextPrayer]\n  }\n","import React, {useContext} from 'react'\nimport PrayCard from './PrayCard'\nimport RemainTime from './RemainTime'\nimport {FetchedDataContext} from './contexts/FetchedDataContext'\nimport {LanguageContext} from './contexts/languageContext'\nimport useNextPrayer from './hooks/useNextPray'\nimport {to12Format} from './helper/formatTime'\n\n\nfunction PrayTimes() {\n\n    // Contexts\n    const [language] = useContext(LanguageContext);\n    const [loaded, data] = useContext(FetchedDataContext);\n\n    // Get Prayer Time\n    const timings = loaded && data.timings;\n\n    // Remove additional data\n    const additional = ['Sunrise', 'Imsak','Midnight', 'Sunset'];\n    additional.forEach(i => delete timings[i]);\n\n    // Get Prayer Names\n    const prayer_en =  Object.keys(timings);\n    const prayer_ar = [ 'الفجر', 'الظهر','العصر','المغرب', 'العشاء'];\n    const prayerNames = language === \"en\" ? prayer_en : prayer_ar;\n\n    // Get Prayer Times\n    const prayTimes =  Object.values(timings);\n    const  [remaineTime, nextPray] = useNextPrayer(prayTimes);\n\n    // Prayer Card\n    const prayerTimeList = prayerNames.map((p, i) =>  (\n        <PrayCard\n          key={p}\n          active={i === nextPray ? \"active\" : \"\"}\n          name={p}\n          time={to12Format(prayTimes[i])}\n        />\n    ))\n\n    // Remain Time message\n    const text = language === \"ar\"\n      ? 'يتبقى على رفع أذان '\n      :'Remaining time to';\n    let prayer = prayerNames[nextPray];\n\n    return (\n        <div className=\"prayTime\">\n            <ul\n              style={{flexDirection: language === \"ar\" && \" row-reverse\"}}>\n              { loaded &&  prayerTimeList }\n            </ul>\n            <RemainTime text={text}  prayer={prayer} time={loaded && remaineTime}/>\n        </div>\n    )\n}\nexport default PrayTimes;\n","import React, {useContext} from 'react'\nimport {LanguageContext} from './contexts/languageContext'\n\nexport default function LanguageToggle() {\n\n    const [language, setLanguage] = useContext(LanguageContext);\n\n    const toggle = (e) => {\n      e.currentTarget.textContent === \"english\"\n        ? setLanguage('en')\n        : setLanguage('ar')\n    }\n\n    return (\n        <div>\n            <button\n              onClick={(e) => toggle(e)}\n              className={language === \"en\" ? 'active' : ''}>\n              english\n            </button>\n\n            <button\n              onClick={(e) => toggle(e)}\n              className={language === \"ar\" ? 'active' : ''}>\n              عربى\n            </button>\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport {FetchedDataContext} from './contexts/FetchedDataContext'\n\nfunction TimeZone() {\n  const [loaded, data] = useContext(FetchedDataContext);\n\n  return  <h4>{loaded && data.meta.timezone}</h4>\n}\n\nexport default TimeZone;\n","import React from 'react'\nimport LanguageToggle from './LanguageToggle'\nimport TimeZone from './TimeZone'\n\nexport default function Footer() {\n    return (\n        <footer className=\"footer\">\n            <LanguageToggle />\n            <TimeZone />\n        </footer>\n    )\n}\n","import React from 'react';\nimport Clock from './components/Clock'\nimport HijriDate from './components/HijriDate'\nimport PrayTimes from './components/PrayTimes'\nimport Footer from './components/Footer'\nimport {FetchedDataProvider} from './components/contexts/FetchedDataContext'\nimport {LanguageProvider} from './components/contexts/languageContext'\nimport './styles/main.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FetchedDataProvider>\n        <LanguageProvider>\n          <Clock />\n          <HijriDate />\n          <PrayTimes />\n          <Footer />\n        </LanguageProvider>\n      </FetchedDataProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}